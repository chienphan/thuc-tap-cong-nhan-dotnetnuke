// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetNuke.Tests.BuildVerification
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Email")]
    public partial class EmailFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Email.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Email", "In order to communicate with my users\r\nAs a host\r\nI want to be able to send email" +
                    "s from my site", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Configure Email")]
        [NUnit.Framework.CategoryAttribute("MustHaveEmailSetUpForSiteDumpToFolder")]
        [NUnit.Framework.CategoryAttribute("MustHaveEmptyEmailFolder")]
        [NUnit.Framework.CategoryAttribute("SiteMustRunInFullTrust")]
        public virtual void ConfigureEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure Email", new string[] {
                        "MustHaveEmailSetUpForSiteDumpToFolder",
                        "MustHaveEmptyEmailFolder",
                        "SiteMustRunInFullTrust"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("I am on the site home page");
#line 11
 testRunner.And("I have logged in as the host");
#line 12
 testRunner.And("I am on the Host Page Host Settings");
#line 13
 testRunner.And("I have updated the Host Email on the Settings page");
#line 14
 testRunner.And("I am on the Advanced Settings Tab");
#line 15
 testRunner.When("I enter localhost into the SMTP server field");
#line 16
 testRunner.And("I select Annonymous SMTP Authentication");
#line 17
 testRunner.And("I click the SMTP Test link");
#line 18
 testRunner.Then("A test email should be sent to the host");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
