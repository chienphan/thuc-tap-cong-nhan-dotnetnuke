// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetNuke.Tests.Website.DesktopModules.Admin.Authentication
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("How to login to a site with Popup Login Page")]
    public partial class HowToLoginToASiteWithPopupLoginPageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "How to login to a site with Popup Login Page", "In order to login to the site\r\nAs a user of the site\r\nI want to be able to enter " +
                    "my credentials and login", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Login as a User in the Registered Users role")]
        [NUnit.Framework.TestCaseAttribute("deadmau5", "password", new string[0])]
        [NUnit.Framework.TestCaseAttribute("philt3r", "password", new string[0])]
        public virtual void LoginAsAUserInTheRegisteredUsersRole(string scenarioUserName, string scenarioPassword, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login as a User in the Registered Users role", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role"});
            table1.AddRow(new string[] {
                        "Registered Users"});
#line 7
 testRunner.Given(string.Format("There is a user {0} {1} with these roles", scenarioUserName, scenarioPassword), ((string)(null)), table1);
#line 10
 testRunner.And("Click the Login link (typically located in the top right corner of each page) to " +
                    "open the User Login pop-up window");
#line 11
 testRunner.When(string.Format("I enter the Login username {0}", scenarioUserName));
#line 12
 testRunner.And(string.Format("I enter the Login password {0}", scenarioPassword));
#line 13
 testRunner.And("I click the Login button");
#line 14
 testRunner.Then("I should be logged in as the user");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
